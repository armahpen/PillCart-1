1. Create ProductContext.jsx
import React, { createContext, useContext, useState, useEffect } from "react";
import initialProducts from "./products.json"; // convert your Excel file to JSON

const ProductContext = createContext();
export const useProducts = () => useContext(ProductContext);

export const ProductProvider = ({ children }) => {
  const [products, setProducts] = useState([]);

  // Load products once from JSON or API
  useEffect(() => {
    const productsWithId = initialProducts.map((p, i) => ({
      id: p.id || i + 1,
      ...p,
    }));
    setProducts(productsWithId);
  }, []);

  const updateProduct = (id, updatedFields) => {
    const updated = products.map((product) =>
      product.id === id ? { ...product, ...updatedFields } : product
    );
    setProducts(updated);
    // TODO: Save to backend if needed
  };

  const deleteProduct = (id) => {
    const filtered = products.filter((product) => product.id !== id);
    setProducts(filtered);
    // TODO: Save deletion to backend if needed
  };

  const addProduct = (newProduct) => {
    const productWithId = { id: Date.now(), ...newProduct };
    setProducts([...products, productWithId]);
    // TODO: Save to backend if needed
  };

  return (
    <ProductContext.Provider value={{ products, updateProduct, deleteProduct, addProduct }}>
      {children}
    </ProductContext.Provider>
  );
};

2. Wrap your app in ProductProvider

In main.jsx or App.jsx:

import { ProductProvider } from "./ProductContext";

ReactDOM.render(
  <ProductProvider>
    <App />
  </ProductProvider>,
  document.getElementById("root")
);

3. Use the context in ShopPage.jsx
import { useProducts } from "../ProductContext";
import ProductCard from "../components/ProductCard";

export default function ShopPage() {
  const { products } = useProducts();
  const [search, setSearch] = useState("");

  const filteredProducts = products.filter((p) =>
    p.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <input 
        value={search} 
        onChange={(e) => setSearch(e.target.value)} 
        placeholder="Search products..."
        className="border p-2 mb-4 w-full"
      />
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredProducts.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
}

4. Use the context in AdminDashboard.jsx
import { useProducts } from "../ProductContext";
import ProductCard from "../components/ProductCard";

export default function AdminDashboard() {
  const { products, updateProduct, deleteProduct, addProduct } = useProducts();
  const [search, setSearch] = useState("");

  const filteredProducts = products.filter((p) =>
    p.name.toLowerCase().includes(search.toLowerCase())
  );

  const handleEdit = (id) => {
    updateProduct(id, { price: 99.99 }); // example edit
  };

  const handleDelete = (id) => {
    deleteProduct(id);
  };

  return (
    <div>
      <input 
        value={search} 
        onChange={(e) => setSearch(e.target.value)} 
        placeholder="Search products..."
        className="border p-2 mb-4 w-full"
      />
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredProducts.map((product) => (
          <div key={product.id}>
            <ProductCard product={product} />
            <div className="flex gap-2 mt-2">
              <button onClick={() => handleEdit(product.id)} className="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
              <button onClick={() => handleDelete(product.id)} className="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

5. Create a shared ProductCard.jsx
export default function ProductCard({ product }) {
  return (
    <div className="border rounded-lg p-4 shadow">
      <img src={product.imageURL} alt={product.name} className="w-full h-40 object-cover mb-2 rounded" />
      <h2 className="font-semibold">{product.name}</h2>
      <p>{product.category}</p>
      <p className="text-green-600 font-bold">${product.price}</p>
    </div>
  );
}